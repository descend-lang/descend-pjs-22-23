fn no_templ_params() -[cpu.thread]-> () <'a, 'b> {
    let a = create_array::<100>(0);
    let mut result = create_array::<100>(0);

    reduce_shared_mem::<100, 4, 'a, 'b>(&'a shrd a, &'b uniq result);
    ()
}

fn reduce_shared_mem<gs: nat, bs: nat, a: prv, b: prv>(
    ha_array: &a shrd cpu.mem [i32; gs*bs],
    h_output: &b uniq cpu.mem [i32; gs]
) -[cpu.thread]-> i32 <'r, 'c, 'd, 'e, 'f, 'g, 'h, 'm, 'u1, 'u2>{
    let mut gpu: Gpu = gpu_device(0);

    let a_array = gpu_alloc_copy::<'c, a, [i32; gs*bs]>(&'c uniq gpu, ha_array);
    let mut out_array = gpu_alloc_copy::<'c, 'm, [i32; gs]>(&'c uniq gpu, &'m shrd *h_output);

    // Todo
    //  There is no check for n == 64 (which is NOT the case). Therefore it is wrong to specify
    //  [i32; n] as the array type. However, this still type checks.
    copy_to_host::<'g, b, [i32; gs]>(&'g shrd out_array, &uniq *h_output);
    let mut res = 0;
    for x in h_output {
        res = res + *x
    };
    res
}