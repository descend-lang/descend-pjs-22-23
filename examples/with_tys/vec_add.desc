fn main() -[cpu.thread]-> i32 <'a, 'b> {

let mut a = create_array::<65536>(1);
let result = create_array::<65536>(1);

inplace_vector_add::<'a, 'b>(&'a uniq a, &'b shrd result);
0
}

// Function is not templated, so we have a case which checks that
fn inplace_vector_add<a: prv, b: prv>(
    // TODO global fun params into same frame as top level declaration in body
    ha_array: &a uniq cpu.mem [i32; 65536],
    hb_array: &b shrd cpu.mem [i32; 65536]
) -[cpu.thread]-> () <'r, 's, 'c, 'd, 'e, 'f, 'i, 'g, 'h>{
    let mut gpu = gpu_device(0);

    let mut a_array: _ @ gpu.global =
        gpu_alloc_copy::<'c, 'd, [i32; 65536]>(&'c uniq gpu, &'d shrd *ha_array);
    let b_array: [i32; 65536] @ gpu.global =
        gpu_alloc_copy::<'f, 'i, [i32; 65536]>(&'f uniq gpu, &'i shrd *hb_array);
    // exec: <b: nat, t: nat, r: prv, m: mem, elem_ty: ty, n: nat>(
    //        &r uniq m Gpu, [[elem_ty; n]], ([[[[Thread; t]]; b]], [[elem_ty; n]]) -[gpu]-> ()) -> ()
    exec::<64, 1024, 'h, (&'r uniq gpu.global [i32; 65536], &'s shrd gpu.global [i32; 65536])>(
        &'h uniq gpu,
        (&'r uniq a_array, &'s shrd b_array),
        | grid: BlockGrp<64, ThreadGrp<1024>>,
          input: (&'r uniq gpu.global [i32; 65536], &'s shrd gpu.global [i32; 65536])
        | -[gpu.grid]-> () {
            let view_a: &'r uniq gpu.global [[i32; 65536]] =
                to_view_mut::<'r, gpu.global, 65536, i32>(input.0);
            let view_b: &'s shrd gpu.global [[i32; 65536]] =
                to_view::<'s, gpu.global, 65536, i32>(input.1);
            let grouped_a = group_mut::<1024, 'r, gpu.global, 65536, i32>(view_a);
            let grouped_b = group::<1024, 's, gpu.global, 65536, i32>(view_b);
            parfor block in grid with a_group, b_group from grouped_a, grouped_b {
                parfor _ in block with a, b from a_group, b_group {
                    *a = *a + *b
                }
            }
        }
    );
    copy_to_host::<'g, a, [i32; 65536]>(&'g shrd a_array, ha_array)
}
